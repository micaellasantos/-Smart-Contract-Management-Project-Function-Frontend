// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Bookstore {
    struct Book {
        uint256 id;
        string title;
        string author;
        bool available;
    }

    mapping(uint256 => Book) public books;
    uint256 public totalBooks;

    event BookAdded(uint256 indexed id, string title, string author);
    event BookRented(uint256 indexed id);

    function addBook(string memory _title, string memory _author) public {
        totalBooks++;
        books[totalBooks] = Book(totalBooks, _title, _author, true);
        emit BookAdded(totalBooks, _title, _author);
    }

    function rentBook(uint256 _id) public {
        require(books[_id].available, "Book is not available");
        books[_id].available = false;
        emit BookRented(_id);
    }

    function bookAvailability(uint256 _id) public view returns (bool) {
        return books[_id].available;
    }

    function getBook(uint256 _id) public view returns (Book memory) {
        return books[_id];
    }
}
